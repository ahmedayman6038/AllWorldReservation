@model AllWorldReservation.BL.Models.HotelModel

@{
    ViewBag.Title = "Edit";
    var currentRoom = 0;
    Layout = "~/Views/Layout/DashboardLayout/_DashboardLayout.cshtml";
}

<!-- Vertical Layout -->
<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <div class="card">
            <div class="header">
                <h2>
                    Edit Hotel
                </h2>
                <button type="button" class="btn btn-primary waves-effect m-t-15" onclick="window.open('/Hotels','_self')">
                    <i class="material-icons">keyboard_arrow_left</i>
                    <span>Back To List</span>
                </button>
            </div>
            <div class="body">
                @using (Html.BeginForm("Edit", "Hotels", FormMethod.Post, new { encType = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.LabelFor(model => model.Name)
                    <div class="form-group">
                        <div class="form-line">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter " + Html.DisplayNameFor(model => model.Name) } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.PlaceId)
                    <div class="form-group">
                        <div class="form-line">
                            @Html.DropDownListFor(model => model.PlaceId, null, new { @class = "form-control show-tick" })
                        </div>
                        @Html.ValidationMessageFor(model => model.PlaceId, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Address)
                    <div class="form-group">
                        <div class="form-line">
                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter " + Html.DisplayNameFor(model => model.Address) } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.AvalibleFrom)
                    <div class="form-group">
                        <div class="form-line">
                            <input type="text" name="AvalibleFrom" id="AvalibleFrom" class="datepicker form-control" placeholder="Please choose a date...">
                        </div>
                        @Html.ValidationMessageFor(model => model.AvalibleFrom, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.AvalibleTo)
                    <div class="form-group">
                        <div class="form-line">
                            <input type="text" name="AvalibleTo" id="AvalibleTo" class="datepicker form-control" placeholder="Please choose a date...">
                        </div>
                        @Html.ValidationMessageFor(model => model.AvalibleTo, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Stars)
                    <div class="form-group">
                        <div class="form-line">
                            @Html.EditorFor(model => model.Stars, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter " + Html.DisplayNameFor(model => model.Stars), min = "0", max = "5" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Stars, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Description)
                    <div class="form-group">
                        <div class="form-line">
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                    <fieldset id="rooms">
                        <legend>Rooms</legend>
                        @for (int i = 0; i < Model.Rooms.Count; i++)
                        {
                            if (!Model.Rooms.ElementAt(i).Deleted)
                            {
                                <div class="room row clearfix" show="true">
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <div class="form-line">
                                                <label>Room Name</label>
                                                <input type="text" name="Rooms[@i].Name" id="Rooms_@(i)_Name" value="@Model.Rooms.ElementAt(i).Name" class="form-control" placeholder="Enter Name" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            <div class="form-line">
                                                <label>Enter Description</label>
                                                <input type="text" name="Rooms[@i].Description" id="Rooms_@(i)_Description" value="@Model.Rooms.ElementAt(i).Description" class="form-control" placeholder="Enter Description">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <div class="form-line">
                                                <label>USD Price</label>
                                                <input type="number" name="Rooms[@i].PriceUSD" id="Rooms_@(i)_PriceUSD" value="@Model.Rooms.ElementAt(i).PriceUSD" min="0" class="form-control" placeholder="USD Price" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <div class="form-line">
                                                <label>EGP Price</label>
                                                <input type="number" name="Rooms[@i].PriceEGP" id="Rooms_@(i)_PriceEGP" value="@Model.Rooms.ElementAt(i).PriceEGP" min="0" class="form-control" placeholder="EGP Price">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <div class="form-line">
                                                <label>No Of Guests</label>
                                                <input type="number" name="Rooms[@i].Guests" id="Rooms_@(i)_Guests" value="@Model.Rooms.ElementAt(i).Guests" min="1" max="10" class="form-control" placeholder="No Of Guests" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-1">
                                        <div class="form-group">
                                            <input type="hidden" name="Rooms[@i].Deleted" value="@(Model.Rooms.ElementAt(i).Deleted?"true":"false")">
                                            <button type="button" class="btn btn-danger waves-effect" onclick="RemoveRoom(this)">
                                                <i class="material-icons">delete</i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                currentRoom++;
                            }
                        }
                    </fieldset>
                    <div class="form-group">
                        <button type="button" class="btn btn-default waves-effect" onclick="AddRoom()">
                            <i class="material-icons">hotel</i>
                            <span>Add Room</span>
                        </button>
                    </div>
                    <div class="form-group">
                        <button type="button" class="btn btn-default waves-effect m-r-20" data-toggle="modal" data-target="#largeModal">
                            <i class="material-icons">add_photo_alternate</i>
                            <span>Select Photo</span>
                        </button>
                        @Html.HiddenFor(model => model.PhotoId)
                    </div>
                    <button type="submit" class="btn btn-primary waves-effect">
                        <span>Save</span>
                        <i class="material-icons">save</i>
                    </button>
                }
            </div>
        </div>
    </div>
</div>
<!-- Large Size -->
<div class="modal fade" id="largeModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="largeModalLabel">@Html.DisplayNameFor(model => model.PhotoId)</h4>
            </div>
            <div class="modal-body" id="photos">
                @{Html.RenderAction("GetPhotos", new { id = Model.Id, page = 1, current = Model.PhotoId });}
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-link waves-effect" onclick="removePhoto()">Unselect</button>
                <button type="button" class="btn btn-link waves-effect" data-dismiss="modal">Ok</button>
            </div>
        </div>
    </div>
</div>
<!-- Loading -->
<div class="loading" id="loading" style="display: none;">
    <div class="preloader loading-circle">
        <div class="spinner-layer pl-light-blue">
            <div class="circle-clipper left">
                <div class="circle"></div>
            </div>
            <div class="circle-clipper right">
                <div class="circle"></div>
            </div>
        </div>
    </div>
</div>
<!-- #END# Vertical Layout -->
@section scripts {
    <script>
        var currentId = @(Model.PhotoId ?? 0);
        var currentRoom = @currentRoom;
        $(function () {
            CKEDITOR.replace('Description');
            if (currentId != 0) {
                $("#" + currentId).addClass("select-photo");
            }
            $('#AvalibleFrom').bootstrapMaterialDatePicker({
                format: 'YYYY-MM-DD',
                clearButton: true,
                weekStart: 1,
                time: false
            }).on('change', function (e, date) {
                $('#AvalibleTo').bootstrapMaterialDatePicker('setMinDate', date);
            });
            $('#AvalibleTo').bootstrapMaterialDatePicker({
                format: 'YYYY-MM-DD',
                clearButton: true,
                weekStart: 1,
                time: false
            });
            @if(Model.AvalibleFrom != null)
            {
               @:$('#AvalibleFrom').val('@Model.AvalibleFrom.Value.ToString("yyyy-MM-dd")');
               @:$('#AvalibleTo').bootstrapMaterialDatePicker('setMinDate', '@Model.AvalibleFrom.Value.ToString("yyyy-MM-dd")');
            }
            @if(Model.AvalibleTo != null)
            {
               @:$('#AvalibleTo').val('@Model.AvalibleTo.Value.ToString("yyyy-MM-dd")');
            }
        });
        function selectPhoto(id) {
            $("#PhotoId").val(id);
            if (currentId != null) {
                $("#" + currentId).removeClass("select-photo");
            }
            $("#" + id).addClass("select-photo");
            currentId = id;
        }
        function removePhoto() {
            if (currentId != 0) {
                $("#PhotoId").val("");
                $("#" + currentId).removeClass("select-photo");
                currentId = null;
            }
        }
        function getPhotos(page) {
            $("#loading").show();
            $.ajax({
                type: "GET",
                url: "/Hotels/GetPhotos/" + @Model.Id + "?page=" + page + "&current=" + currentId,
                dataType: "html",
                success: function (data) {
                    $("#photos").html(data);
                },
                error: function (data) {
                    console.log(data);
                },
                complete: function () {
                    $("#loading").hide();
                }
            })
        }
        function AddRoom() {
            var html = '<div class="room row clearfix" show="true">' +
                '<div class="col-sm-2" >' +
                ' <div class="form-group">' +
                ' <div class="form-line">' +
                '<label>Room Name</label>' +
                '<input type="text" name="Rooms[' + currentRoom + '].Name" id="Rooms_' + currentRoom + '_Name" class="form-control" placeholder="Enter Name" required>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="col-sm-3">' +
                '<div class="form-group">' +
                '<div class="form-line">' +
                '<label>Room Description</label>' +
                '<input type="text" name="Rooms[' + currentRoom + '].Description" id="Rooms_' + currentRoom + '_Description" class="form-control" placeholder="Enter Description">' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="col-sm-2">' +
                '<div class="form-group">' +
                '<div class="form-line">' +
                '<label>USD Price</label>' +
                '<input type="number" name="Rooms[' + currentRoom + '].PriceUSD" id="Rooms_' + currentRoom + '_PriceUSD" class="form-control" min="0" value="0" placeholder="USD Price" required>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="col-sm-2">' +
                '<div class="form-group">' +
                '<div class="form-line">' +
                '<label>EGP Price</label>' +
                '<input type="number" name="Rooms[' + currentRoom + '].PriceEGP" id="Rooms_' + currentRoom + '_PriceEGP" class="form-control" min="0" value="0" placeholder="EGP Price">' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="col-sm-2">' +
                '<div class="form-group">' +
                '<div class="form-line">' +
                '<label>No Of Guests</label>' +
                '<input type="number" name="Rooms[' + currentRoom + '].Guests" id="Rooms_' + currentRoom + '_Guests" class="form-control" min="1" value="1" placeholder="No Of Guests" required>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="col-sm-1">' +
                '<div class="form-group">' +
                '<input type="hidden" name="Rooms[' + currentRoom + '].Deleted" value="false">' +
                '<button type="button" class="btn btn-danger waves-effect" onclick="RemoveRoom(this)">' +
                '<i class="material-icons">delete</i>' +
                '</button>' +
                '</div>' +
                '</div>' +
                '</div>';
            $("#rooms").append(html);
            currentRoom++;
        }

        function RemoveRoom(ctr) {
            debugger;
            var rooms = $('div[show="true"]');
            if (rooms.length > 1) {
                var row = $(ctr).closest('div[class^="room"]');
                var deleted = $(ctr).parent().find('input[name$="Deleted"]');
                $(deleted).val("true");
                $(row).attr("show", "false");
                $(row).hide();
            }

        }
    </script>
}